def display_metrics_aesthetic(metrics, hr_img=None, sr_result=None, img1=None, scale_factor=4):
    """Display metrics in an aesthetic manner"""
    
    # Main metrics display
    st.markdown('<div class="metrics-container">', unsafe_allow_html=True)
    st.markdown('<h2 style="color: white; text-align: center; margin-bottom: 1.5rem; font-size: 2rem;">üìä Image Quality Metrics</h2>', unsafe_allow_html=True)
    
    # Create metrics grid
    metrics_html = '<div class="metrics-grid">'
    
    # MSE Card
    metrics_html += f'''
    <div class="metric-card">
        <div class="metric-icon">üìâ</div>
        <div class="metric-label">Mean Squared Error</div>
        <div class="metric-value">{metrics['MSE']:.6f}</div>
        <div class="metric-description">Lower values indicate better quality</div>
    </div>
    '''
    
    # RMSE Card
    metrics_html += f'''
    <div class="metric-card">
        <div class="metric-icon">üìê</div>
        <div class="metric-label">Root Mean Squared Error</div>
        <div class="metric-value">{metrics['RMSE']:.6f}</div>
        <div class="metric-description">Pixel-level error magnitude</div>
    </div>
    '''
    
    # PSNR Card
    psnr_color = "#22c55e" if metrics['PSNR'] > 30 else "#3b82f6" if metrics['PSNR'] > 25 else "#eab308" if metrics['PSNR'] > 20 else "#ef4444"
    metrics_html += f'''
    <div class="metric-card">
        <div class="metric-icon">üì∂</div>
        <div class="metric-label">Peak Signal-to-Noise Ratio</div>
        <div class="metric-value" style="color: {psnr_color};">{metrics['PSNR']:.2f} dB</div>
        <div class="metric-description">Signal quality vs noise level</div>
    </div>
    '''
    
    # SSIM Card
    ssim_color = "#22c55e" if metrics['SSIM'] > 0.9 else "#3b82f6" if metrics['SSIM'] > 0.8 else "#eab308" if metrics['SSIM'] > 0.7 else "#ef4444"
    metrics_html += f'''
    <div class="metric-card">
        <div class="metric-icon">üîç</div>
        <div class="metric-label">Structural Similarity Index</div>
        <div class="metric-value" style="color: {ssim_color};">{metrics['SSIM']:.4f}</div>
        <div class="metric-description">Structural similarity (0-1 scale)</div>
    </div>
    '''
    
    metrics_html += '</div>'
    st.markdown(metrics_html, unsafe_allow_html=True)
    
    # Quality assessment badge
    if metrics['PSNR'] > 30:
        quality, badge_class = "Excellent", "quality-excellent"
    elif metrics['PSNR'] > 25:
        quality, badge_class = "Good", "quality-good"
    elif metrics['PSNR'] > 20:
        quality, badge_class = "Fair", "quality-fair"
    else:
        quality, badge_class = "Poor", "quality-poor"
    
    st.markdown(f'''
    <div style="text-align: center; margin-top: 2rem;">
        <div class="quality-badge {badge_class}">
            ‚≠ê Overall Quality: {quality}
        </div>
    </div>
    ''', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Resolution comparison stats
    if sr_result is not None and img1 is not None:
        st.markdown('<div class="comparison-stats">', unsafe_allow_html=True)
        st.markdown('<h3 style="color: #2d3748; text-align: center; margin-bottom: 1rem;">üìè Resolution Enhancement Statistics</h3>', unsafe_allow_html=True)
        
        original_pixels = img1.shape[0] * img1.shape[1]
        sr_pixels = sr_result.shape[0] * sr_result.shape[1]
        pixel_increase = ((sr_pixels - original_pixels) / original_pixels) * 100
        
        stats_html = f'''
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-value">{img1.shape[1]} √ó {img1.shape[0]}</div>
                <div class="stat-label">Original Resolution</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{sr_result.shape[1]} √ó {sr_result.shape[0]}</div>
                <div class="stat-label">Enhanced Resolution</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{scale_factor}√ó</div>
                <div class="stat-label">Scale Factor</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{original_pixels:,}</div>
                <div class="stat-label">Original Pixels</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{sr_pixels:,}</div>
                <div class="stat-label">Enhanced Pixels</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">{pixel_increase:.1f}%</div>
                <div class="stat-label">Pixel Increase</div>
            </div>
        </div>
        '''
        
        st.markdown(stats_html, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

# Function to display no-reference metrics
def display_no_ref_metrics_aesthetic(niqe_score, brisque_score):
    """Display no-reference metrics aesthetically"""
    
    st.markdown('<div class="no-ref-metrics">', unsafe_allow_html=True)
    st.markdown('<h3 style="color: #2d3748; text-align: center; margin-bottom: 1rem;">üìà No-Reference Quality Assessment</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if niqe_score:
            niqe_color = "#22c55e" if niqe_score < 4 else "#3b82f6" if niqe_score < 5 else "#eab308" if niqe_score < 6 else "#ef4444"
            niqe_quality = "Excellent" if niqe_score < 4 else "Good" if niqe_score < 5 else "Fair" if niqe_score < 6 else "Poor"
            
            st.markdown(f'''
            <div style="text-align: center; padding: 1rem; background: white; border-radius: 10px; margin-bottom: 1rem;">
                <div style="font-size: 2rem; color: {niqe_color}; font-weight: 700;">{niqe_score:.2f}</div>
                <div style="font-size: 0.9rem; color: #718096; font-weight: 600;">NIQE Score</div>
                <div style="font-size: 0.8rem; color: #a0aec0; margin-top: 0.5rem;">Quality: {niqe_quality}</div>
                <div style="font-size: 0.7rem; color: #cbd5e0; margin-top: 0.3rem;">Lower is better (3-8 range)</div>
            </div>
            ''', unsafe_allow_html=True)
    
    with col2:
        if brisque_score:
            brisque_color = "#22c55e" if brisque_score < 30 else "#3b82f6" if brisque_score < 50 else "#eab308" if brisque_score < 70 else "#ef4444"
            brisque_quality = "Excellent" if brisque_score < 30 else "Good" if brisque_score < 50 else "Fair" if brisque_score < 70 else "Poor"
            
            st.markdown(f'''
            <div style="text-align: center; padding: 1rem; background: white; border-radius: 10px; margin-bottom: 1rem;">
                <div style="font-size: 2rem; color: {brisque_color}; font-weight: 700;">{brisque_score:.2f}</div>
                <div style="font-size: 0.9rem; color: #718096; font-weight: 600;">BRISQUE Score</div>
                <div style="font-size: 0.8rem; color: #a0aec0; margin-top: 0.5rem;">Quality: {brisque_quality}</div>
                <div style="font-size: 0.7rem; color: #cbd5e0; margin-top: 0.3rem;">Lower is better (0-100 range)</div>
            </div>
            ''', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

# Usage in your main code - replace the existing metrics display section with:

# Evaluation metrics
if hr_reference is not None:
    st.markdown('<div class="sub-header">üìä Evaluation Metrics</div>', unsafe_allow_html=True)
    
    # Load HR reference
    hr_bytes = np.asarray(bytearray(hr_reference.read()), dtype=np.uint8)
    hr_img = cv2.imdecode(hr_bytes, cv2.IMREAD_GRAYSCALE)
    
    # Calculate metrics
    metrics = calculate_metrics(hr_img, sr_result)
    
    # Display metrics aesthetically
    display_metrics_aesthetic(metrics, hr_img, sr_result, img1, scale_factor)
    
    # Display HR reference
    st.image(hr_img, caption="HR Reference", use_column_width=True, clamp=True)

# No-reference metrics
st.markdown('<div class="sub-header">üìà No-Reference Quality Metrics</div>', unsafe_allow_html=True)

niqe_score = calculate_niqe(sr_result)
brisque_score = calculate_brisque(sr_result)

# Display no-reference metrics aesthetically
display_no_ref_metrics_aesthetic(niqe_score, brisque_score)
# Main App